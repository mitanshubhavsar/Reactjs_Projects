In Folder of ConfusionServer

1.npm start
2. Server Side NodeJS,Express and MongoDB -> mongodb -> (use Command) mongod --dbpath=data --bind_ip 127.0.0.1 //To start mongoDB server

To check its response
 1.In Browser, go to http://localhost:3000 where server is running.
 2.Do GET request, in POSTMAN Application http://localhost:3000.


To Test its functionality:
 Start the server at localhost:3000

 1.Test GET request http://localhost:3000 -> serves index.html
 2.Test GET request http://localhost:3000/index.html -> serves index.html
 3.Test GET request http://localhost:3000/aboutus.html -> serves aboutus.html
 4.Test GET/PUT/POST request http://localhost:3000/test.txt or <random filename> -> This is Express Server 


To Test the REST API functionality in POSTMAN Application:
 1.Test GET request http://localhost:3000/dishes <dishes,leaders,promotions>
 2.Test POST request http://localhost:3000/dishes <dishes,leaders,promotions>
	Body ->raw ->json ->
 
	Dishes:
	{
      "name": "Uthappizza",
      "image": "images/uthappizza.png",
      "category": "mains",
      "label": "Hot",
      "price": "4.99",
      "featured": "true",
      "description": "A unique combination of Indian Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer.",
      "comments": [
        {
          "rating": 5,
          "comment": "Imagine all the eatables, living in conFusion!",
          "author": "John Lemon",
          "date": "2012-10-16T17:57:28.556094Z"
        },
       ]
    }

        Leaders:
       {
      "name": "Peter Pan",
      "image": "images/alberto.png",
      "designation": "Chief Epicurious Officer",
      "abbr": "CEO",
      "featured": "false",
      "description": "Our CEO, Peter, credits his hardworking East Asian immigrant parents who undertook the arduous journey to the shores of America with the intention of giving their children the best future. His mother's wizardy in the kitchen whipping up the tastiest dishes with whatever is available inexpensively at the supermarket, was his first inspiration to create the fusion cuisines for which The Frying Pan became well known. He brings his zeal for fusion cuisines to this restaurant, pioneering cross-cultural culinary connections."
    }

	Promotions:
         {
      "name": "Weekend Grand Buffet",
      "image": "images/buffet.png",
      "label": "New",
      "price": "19.99",
      "featured": "true",
      "description": "Featuring mouthwatering combinations with a choice of five different salads, six enticing appetizers, six main entrees and five choicest desserts. Free flowing bubbly and soft drinks. All for just $19.99 per person "
    }

	
		
 3.Test DELETE request http://localhost:3000/dishes <dishes,leaders,promotions> 
 4.Test GET request http://localhost:3000/dishes <dishes,leaders,promotions>/23 <any dishId> 
 5.Test PUT request http://localhost:3000/dishes <dishes,leaders,promotions>/23 <any dishId>
	Body ->raw ->json -> 
	{"name":"test", "description":"test description"}
 6.Test DELETE request http://localhost:3000/dishes <dishes,leaders,promotions>/23 <any dishId>

 For Dishes->Comments

 7.Test GET request http://localhost:3000/dishes/<DishId>/comments
 8.Test GET request http://localhost:3000/dishes/<DishId>/comments/<Comments ID>
 9.Test POST request http://localhost:3000/dishes/<DishId>/comments
	Body ->raw ->json -> 
	{"rating":"test", "comment":"test description","author":"XYZ"}
 10.Test PUT request http://localhost:3000/dishes/<DishId>/comments/<comment ID>
	Body ->raw ->json -> 
	{"rating":"test", "comment":"test description","author":"XYZ"}
 11.Test DELETE request http://localhost:3000/dishes/<DishId>/comments
 12.Test DELETE request http://localhost:3000/dishes/<DishId>/comments/<comment ID>


To Check Basic Authentication:
	keep Server running by npm start;
	On Any Request GET,POST,PUT,DELETE on http://localhost:3000 Need to Enter Username:- admin, password:-password to access server.
	On Postman Application go to Authorization -> Type -> Basic Auth -> Enter Username:- admin, password:-password 

To Check Cookies Authentication:
	keep Server running by npm start;
	On Postman Application go to Authorization -> Type -> Basic Auth -> Enter Username:- admin, password:-password
	Notice in Header->Cookie or cookies(beside body) or Cookies(below send)->localhost->user (Cookie is set up)
	
	After the cookie is set up we can remove the Authorization fields(Username,password) and still send GET,POST,PUT,DELETE requests which
	will access server till cookie expires (cookie is passed in Headers of each request). 

To Check Session Basic Authentication:
	keep Server running by npm start;
	On Postman Application,
	Test GET request http://localhost:3000/dishes and set Authorization -> Type -> Basic Auth -> Enter Username:- admin, password:-password 
	Notice in Header->Cookie or cookies(beside body) or Cookies(below send)->localhost->user (Session-id is set up)

	After the session-id is set up we can remove the Authorization fields(Username,password) and still send GET,POST,PUT,DELETE requests which
	will access server till cookie expires (session-id is passed in Headers of each request). 

To Check Functionality of Signup,Login,Logout by Sessions
	keep Server running by npm start;
	On Postman Application, 
	Test POST request http://localhost:3000/users/signup 
		Body ->raw ->json -> 
		{"username":"xyz", "password":"password","admin":"false"} 
	Test POST request http://localhost:3000/users/login and set Authorization -> Type -> Basic Auth -> Enter Username:- xyz, password:-password
	Test GET request http://localhost:3000/users/logout and check Header->Cookie or cookies(beside body) or Cookies(below send)->localhost->user (Session-id is deleted)
	
To Check Functionality of Signup,Login,Logout by Passport
	keep Server running by npm start;
	On Postman Application, 
	Test POST request http://localhost:3000/users/signup 
		Body ->raw ->json -> 
		{"username":"xyz", "password":"password"}
	Test POST request http://localhost:3000/users/login 
		Body ->raw ->json -> 
		{"username":"xyz", "password":"password"}
		Notice in Header->Cookie or cookies(beside body) or Cookies(below send)->localhost->user (Session-id is set up)
		can send GET,POST,PUT,DELETE requests to dishes,promotions,leaders
	Test GET request http://localhost:3000/users/logout and check Header->Cookie or cookies(beside body) or Cookies(below send)->localhost->user (Session-id is deleted)


To check User Authentication with passport and json web token 
	keep Server running by npm start;
	On Postman Application, 
	Test GET request http://localhost:3000/<dishes>,<promotions>,<leaders>
	Test POST,PUT,DELETE request http://localhost:3000/<dishes>,<promotions>,<leaders>  => Unauthorized
	Test POST request http://localhost:3000/users/signup with same users available through Body ->raw ->json -> (eg. username=XYZ, password=password) => UserExistsError
	Test POST request http://localhost:3000/users/login with same users available through Body ->raw ->json -> (note the token you got)

	Now Test POST,PUT,DELETE request http://localhost:3000/<dishes>,<promotions>,<leaders> by adding =>
		Header -> Authorization -> bearer <token>(got from login) [value] 

To check the functionality of Mongoose population 
	keep Server running by npm start;
	On Postman Application, 
	Test POST request http://localhost:3000/users/login with same users available through Body ->raw ->json -> (eg. username=XYZ, password=password,firstname=sdk,lastname=fes) 
	Test POST request http://localhost:3000/users/login with same users available through Body ->raw ->json -> (note the token you got)
		Header -> Authorization -> bearer <token>(got from login) [value] 
	Test GET request http://localhost:3000/dishes/<dishID>/comments
	Test POST request http://localhost:3000/dishes/<dishID>/comments -> notice the firstname,lastname, username,id populated by itself 
	Test GET request http://localhost:3000/dishes/<dishID>/comments/<commentId>

To check priviledges made for admin (verifyadmin) :
	keep Server running by npm start;
	On Postman Application, 
	set up admin account :- Test POST request http://localhost:3000/users/login with same users available through Body ->raw ->json -> (eg. username=admin, password=password,firstname=sdk,lastname=fes)
	run the mongo REPL shell (For giving commands to server) : Server Side NodeJS,Express and MongoDB -> mongodb -> (use Command) mongo
		use command use conFusionDB -> db.users.update({"username":"admin"}, {$set : {"admin": true}})

	Test POST request http://localhost:3000/users/login with same admin account Body ->raw ->json -> (note the token you got)
		Header -> Authorization -> bearer <token>(got from login) [value]
	Test GET request http://localhost:3000/users
	Test POST,PUT,DELETE requst http://localhost:3000/dishes 
	Test POST,PUT,DELETE requst http://localhost:3000/dishes/<DishId> same for comments

To Check the functionality of setting https secure server
	keep Server running by npm start;
	Test request on Browser https://localhost:3443 -> proceed to site -> Welcome to express
	Test request on Browser http://localhost:3000 -> redirect to -> https:localhost:3443 (This ensures you will always access the server on secure port)

To Check the functionality of uploading files:
	keep Server running by npm start;
	On Postman Application,
	Test POST request http://localhost:3000/users/login or on https://localhost:3443/users/login with same admin account Body ->raw ->json -> (note the token you got) [login as admin]
		Header -> Authorization -> bearer <token>(got from login) [value]
		if shows error -> postman settings -> SSL verification (off)
	Test POST request https://localhost:3443/imageUpload then body -> form-data -> key = imageFile (set it to File) -> value => click select Files (choose a file)
		notice the response in json about uploaded file
		check the uploaded file in (public\\images\\logo.png) or at path specified in json response  
	

	

    
	

	
	
	
		
	
	

	 

